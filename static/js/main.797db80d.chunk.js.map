{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Label","label","_templateObject2","EmailList","ul","_templateObject3","EmailItem","li","_templateObject4","_ref","valid","_ref2","EmailText","span","_templateObject5","Close","_templateObject6","_ref3","Form","form","_templateObject7","App","state","emails","value","handleChange","e","_this","setState","target","handleSubmit","concat","Object","toConsumableArray","validateEmail","preventDefault","email","test","handleClear","filter","item","_this2","this","_this$state","react_default","a","createElement","className","map","key","onClick","version","xmlns","class","d","onSubmit","name","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u6DAGA,IAAMA,EAAUC,IAAOC,IAAVC,KAUPC,EAAQH,IAAOI,MAAVC,KAKLC,EAAYN,IAAOO,GAAVC,KAMTC,EAAYT,IAAOU,GAAVC,IAEJ,SAAAC,GAAA,OAAAA,EAAEC,MAAmB,OAAS,QACnB,SAAAC,GAAA,OAAAA,EAAED,MAAmB,OAAS,YAa9CE,EAAYf,IAAOgB,KAAVC,KAITC,EAAQlB,IAAOgB,KAAVG,IAcK,SAAAC,GAAA,OAAAA,EAAEP,MAAmB,OAAS,SAQxCQ,EAAOrB,IAAOsB,KAAVC,KAmFKC,6MA9DbC,MAAQ,CACNC,OAAQ,CAAC,CAACC,MAAO,gBAAiBd,OAAO,GAAO,CAACc,MAAO,WAAYd,OAAO,IAC3Ec,MAAO,MAGTC,aAAe,SAAAC,GAAC,OAAIC,EAAKC,SAAS,CAACJ,MAAOE,EAAEG,OAAOL,WAEnDM,aAAe,SAACJ,GACdC,EAAKC,SAAS,CACZL,OAAM,GAAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAML,EAAKL,MAAMC,QAAjB,CAAyB,CAC7BC,MAAOG,EAAKL,MAAME,MAClBd,MAAOiB,EAAKO,cAAcP,EAAKL,MAAME,UAEvCA,MAAO,KAETE,EAAES,oBAGJD,cAAgB,SAACE,GACf,MAAO,eAAeC,KAAKD,MAG7BE,YAAc,SAACF,GACbT,EAAKC,SAAS,CACZL,OAAQI,EAAKL,MAAMC,OAAOgB,OAAO,SAAAC,GAAI,OAAIA,EAAKhB,QAAUY,EAAMZ,mFAIzD,IAAAiB,EAAAC,KAAAC,EACmBD,KAAKpB,MAAvBC,EADDoB,EACCpB,OAAQC,EADTmB,EACSnB,MAChB,OACEoB,EAAAC,EAAAC,cAAClD,EAAD,CAASmD,UAAU,OACjBH,EAAAC,EAAAC,cAAC9C,EAAD,YACA4C,EAAAC,EAAAC,cAAC3C,EAAD,KAAYoB,EAAOyB,IAAI,SAAAZ,GAAK,OAC1BQ,EAAAC,EAAAC,cAACxC,EAAD,CACE2C,IAAKb,EAAMZ,MACXd,MAAO0B,EAAM1B,MACbwC,QAAS,kBAAMT,EAAKH,YAAYF,KAEhCQ,EAAAC,EAAAC,cAAClC,EAAD,KACGwB,EAAMZ,OAEToB,EAAAC,EAAAC,cAAC/B,EAAD,CAAOL,MAAO0B,EAAM1B,OAClBkC,EAAAC,EAAAC,cAAA,OAAKK,QAAQ,MAAMC,MAAM,8BACvBR,EAAAC,EAAAC,cAAA,QAAMO,MAAM,UAAUC,EAAE,sCAKhCV,EAAAC,EAAAC,cAAC5B,EAAD,CAAMqC,SAAUb,KAAKZ,cACnBc,EAAAC,EAAAC,cAAA,SACEU,KAAK,QACLC,KAAK,OACLjC,MAAOA,EACPkC,SAAUhB,KAAKjB,wBAxDTkC,aCzEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.797db80d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n  border-top: 5px solid #C5211E;\n  border-bottom: 1px solid #999;\n  width: auto;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Label = styled.label`\n  display: inline-block;\n  line-height: 24px;\n`;\n\nconst EmailList = styled.ul`\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n`;\n\nconst EmailItem = styled.li`\n  display: inline-block;\n  color: ${({valid}) => valid ? '#333' : '#fff'};\n  background-color: ${({valid}) => valid ? '#ccc' : '#C5211E'};\n  margin: 0 0 0 12px;\n  font-size: 12px;\n  line-height: 24px;\n  padding: 0 6px 0 12px;\n  border-radius: 24px;\n  cursor: pointer;\n  span {\n    display: inline-block;\n    vertical-align: middle;\n  }\n`;\n\nconst EmailText = styled.span`\n  line-height: 24px;\n`;\n\nconst Close = styled.span`\n  margin-left: 2px;\n  width: 24px;\n  padding-top: 24px;\n  position: relative;\n  height: 0;\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: block;\n    height: 24px;\n    width: 24px;\n    .close-x {\n      stroke: ${({valid}) => valid ? '#333' : '#fff'};\n      fill: transparent;\n      stroke-linecap: round;\n      stroke-width: 1;\n    }\n  }\n`;\n\nconst Form = styled.form`\n  display: inline-block;\n  margin-left: 6px;\n  input[type=text] {\n    height: 24px;\n    line-height: 24px;\n    padding: 0 12px;\n    font-size: 14px;\n    min-width: 250px;\n    width: auto;\n    appearance: none;\n    border: none;\n    outline: none;\n    &:focus {\n      background: transparent;\n    }\n  }\n`;\n\nclass App extends Component {\n\n  state = {\n    emails: [{value: 'Test@test.com', valid: true}, {value: 'Test.com', valid: false}],\n    value: ''\n  }\n\n  handleChange = e => this.setState({value: e.target.value});\n\n  handleSubmit = (e) => {\n    this.setState({\n      emails: [...this.state.emails, {\n        value: this.state.value,\n        valid: this.validateEmail(this.state.value)\n      }],\n      value: ''\n    });\n    e.preventDefault();\n  }\n\n  validateEmail = (email) => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  }\n\n  handleClear = (email) => {\n    this.setState({\n      emails: this.state.emails.filter(item => item.value !== email.value)\n    });\n  }\n\n  render() {\n    const { emails, value } = this.state;\n    return (\n      <Wrapper className=\"App\">\n        <Label>To:</Label>\n        <EmailList>{emails.map(email => (\n          <EmailItem \n            key={email.value} \n            valid={email.valid}\n            onClick={() => this.handleClear(email)}\n          >\n            <EmailText>\n              {email.value}\n            </EmailText>\n            <Close valid={email.valid}>\n              <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path class=\"close-x\" d=\"M 9,9 L 15,15 M 15,9 L 9,15\" />\n              </svg>\n            </Close>\n          </EmailItem>\n        ))}</EmailList>\n        <Form onSubmit={this.handleSubmit}>\n          <input \n            name=\"email\" \n            type=\"text\"\n            value={value}\n            onChange={this.handleChange}\n          />\n        </Form>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}